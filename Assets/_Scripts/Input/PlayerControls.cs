//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.2
//     from Assets/_Scripts/Input/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""PlayerMap"",
            ""id"": ""ec57a9bf-67cc-4039-9d84-655bfd80b44f"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""PassThrough"",
                    ""id"": ""babafd84-6053-4a30-8856-7ed7b9602f1d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Arm"",
                    ""type"": ""PassThrough"",
                    ""id"": ""e0a7d2f8-d652-4238-9b1e-5c5e39deb745"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Grab"",
                    ""type"": ""Button"",
                    ""id"": ""76e9ec7d-e027-4aaa-aab0-2a355332a1a3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Grab2"",
                    ""type"": ""Button"",
                    ""id"": ""49a22816-39cc-4b1d-9ce6-b538680bd6be"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ToggleCamera"",
                    ""type"": ""Button"",
                    ""id"": ""82e9d9e3-5917-494c-bbf1-d6bfc40e7e4b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Start"",
                    ""type"": ""Button"",
                    ""id"": ""555dd8df-f03d-4425-9d80-2297e733ff33"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Restart"",
                    ""type"": ""Button"",
                    ""id"": ""325ab12c-2ad9-4649-a458-62354bf95489"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""6435363a-7bca-4a30-85bd-bb72c7db5c78"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4b2ddb2e-d586-4672-baec-b75cd250a088"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Arm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""681cacdc-e23f-4d66-bbd1-7991faceb4ef"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Grab"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6918f3ea-8422-4132-81bf-a6dfe23d0e2d"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Grab2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""033a4546-3be4-484b-a5f4-c7dacd903862"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToggleCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7730beda-2b87-45ae-b5bd-f7c8257a0b3a"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Start"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8372d862-93ec-4d46-bf29-5be861ef4dc2"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Restart"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerMap
        m_PlayerMap = asset.FindActionMap("PlayerMap", throwIfNotFound: true);
        m_PlayerMap_Move = m_PlayerMap.FindAction("Move", throwIfNotFound: true);
        m_PlayerMap_Arm = m_PlayerMap.FindAction("Arm", throwIfNotFound: true);
        m_PlayerMap_Grab = m_PlayerMap.FindAction("Grab", throwIfNotFound: true);
        m_PlayerMap_Grab2 = m_PlayerMap.FindAction("Grab2", throwIfNotFound: true);
        m_PlayerMap_ToggleCamera = m_PlayerMap.FindAction("ToggleCamera", throwIfNotFound: true);
        m_PlayerMap_Start = m_PlayerMap.FindAction("Start", throwIfNotFound: true);
        m_PlayerMap_Restart = m_PlayerMap.FindAction("Restart", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerMap
    private readonly InputActionMap m_PlayerMap;
    private IPlayerMapActions m_PlayerMapActionsCallbackInterface;
    private readonly InputAction m_PlayerMap_Move;
    private readonly InputAction m_PlayerMap_Arm;
    private readonly InputAction m_PlayerMap_Grab;
    private readonly InputAction m_PlayerMap_Grab2;
    private readonly InputAction m_PlayerMap_ToggleCamera;
    private readonly InputAction m_PlayerMap_Start;
    private readonly InputAction m_PlayerMap_Restart;
    public struct PlayerMapActions
    {
        private @PlayerControls m_Wrapper;
        public PlayerMapActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_PlayerMap_Move;
        public InputAction @Arm => m_Wrapper.m_PlayerMap_Arm;
        public InputAction @Grab => m_Wrapper.m_PlayerMap_Grab;
        public InputAction @Grab2 => m_Wrapper.m_PlayerMap_Grab2;
        public InputAction @ToggleCamera => m_Wrapper.m_PlayerMap_ToggleCamera;
        public InputAction @Start => m_Wrapper.m_PlayerMap_Start;
        public InputAction @Restart => m_Wrapper.m_PlayerMap_Restart;
        public InputActionMap Get() { return m_Wrapper.m_PlayerMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerMapActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerMapActions instance)
        {
            if (m_Wrapper.m_PlayerMapActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_PlayerMapActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_PlayerMapActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_PlayerMapActionsCallbackInterface.OnMove;
                @Arm.started -= m_Wrapper.m_PlayerMapActionsCallbackInterface.OnArm;
                @Arm.performed -= m_Wrapper.m_PlayerMapActionsCallbackInterface.OnArm;
                @Arm.canceled -= m_Wrapper.m_PlayerMapActionsCallbackInterface.OnArm;
                @Grab.started -= m_Wrapper.m_PlayerMapActionsCallbackInterface.OnGrab;
                @Grab.performed -= m_Wrapper.m_PlayerMapActionsCallbackInterface.OnGrab;
                @Grab.canceled -= m_Wrapper.m_PlayerMapActionsCallbackInterface.OnGrab;
                @Grab2.started -= m_Wrapper.m_PlayerMapActionsCallbackInterface.OnGrab2;
                @Grab2.performed -= m_Wrapper.m_PlayerMapActionsCallbackInterface.OnGrab2;
                @Grab2.canceled -= m_Wrapper.m_PlayerMapActionsCallbackInterface.OnGrab2;
                @ToggleCamera.started -= m_Wrapper.m_PlayerMapActionsCallbackInterface.OnToggleCamera;
                @ToggleCamera.performed -= m_Wrapper.m_PlayerMapActionsCallbackInterface.OnToggleCamera;
                @ToggleCamera.canceled -= m_Wrapper.m_PlayerMapActionsCallbackInterface.OnToggleCamera;
                @Start.started -= m_Wrapper.m_PlayerMapActionsCallbackInterface.OnStart;
                @Start.performed -= m_Wrapper.m_PlayerMapActionsCallbackInterface.OnStart;
                @Start.canceled -= m_Wrapper.m_PlayerMapActionsCallbackInterface.OnStart;
                @Restart.started -= m_Wrapper.m_PlayerMapActionsCallbackInterface.OnRestart;
                @Restart.performed -= m_Wrapper.m_PlayerMapActionsCallbackInterface.OnRestart;
                @Restart.canceled -= m_Wrapper.m_PlayerMapActionsCallbackInterface.OnRestart;
            }
            m_Wrapper.m_PlayerMapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Arm.started += instance.OnArm;
                @Arm.performed += instance.OnArm;
                @Arm.canceled += instance.OnArm;
                @Grab.started += instance.OnGrab;
                @Grab.performed += instance.OnGrab;
                @Grab.canceled += instance.OnGrab;
                @Grab2.started += instance.OnGrab2;
                @Grab2.performed += instance.OnGrab2;
                @Grab2.canceled += instance.OnGrab2;
                @ToggleCamera.started += instance.OnToggleCamera;
                @ToggleCamera.performed += instance.OnToggleCamera;
                @ToggleCamera.canceled += instance.OnToggleCamera;
                @Start.started += instance.OnStart;
                @Start.performed += instance.OnStart;
                @Start.canceled += instance.OnStart;
                @Restart.started += instance.OnRestart;
                @Restart.performed += instance.OnRestart;
                @Restart.canceled += instance.OnRestart;
            }
        }
    }
    public PlayerMapActions @PlayerMap => new PlayerMapActions(this);
    public interface IPlayerMapActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnArm(InputAction.CallbackContext context);
        void OnGrab(InputAction.CallbackContext context);
        void OnGrab2(InputAction.CallbackContext context);
        void OnToggleCamera(InputAction.CallbackContext context);
        void OnStart(InputAction.CallbackContext context);
        void OnRestart(InputAction.CallbackContext context);
    }
}
